@Library('jenkins-libraries') _
pipeline {
    agent { label 'build-server' }
    tools {
        jdk 'jdk17'
        nodejs 'node18'
    }
    environment {
        SCANNER_HOME = tool 'sonar-scanner'
        FOLDER_PATH="source/src/order-service"
        TRIVY_IMAGE_REPORT = "trivy-image-report-${env.BUILD_ID}.html"
        CI_PROJECT_NAME = 'microservice/order-service' 
        VERSION  = "0.0.1"
        TAG_IMAGE= "${env.BUILD_ID}"
        IMAGE_VERSION = "${CI_PROJECT_NAME}:${TAG_IMAGE}"
        PROJECT_NAME = 'order-service'
        ARTIFACT_NAME = "${PROJECT_NAME}-build-${TAG_IMAGE}.tar.gz"
        
        HARBOR_REPO_NAME="devsecops"
        HARBOR_IMAGE="${HARBOR_REPO_NAME}/${CI_PROJECT_NAME}"
        NEXUS_URL = "http://nexus.thienngo.tech"
    }
    stages {
        stage('Cleaning Workspace') {
            steps {
                cleanWs()  // Dọn dẹp workspace
            }
        }
        stage('Git Checkout') {
            steps {
                   // Di chuyển vào thư mục
                    git branch: 'main', 
                        credentialsId: 'git-cred', 
                        url: 'https://github.com/ThienAlice/DACN.git'  // Clone repository từ Git
                
            }
        }
        stage('SonarQube Analysis') {
            steps {
                dir("${FOLDER_PATH}") {  // Di chuyển vào thư mục
                    
                    withSonarQubeEnv('sonar') {  // Sử dụng môi trường SonarQube đã cấu hình
                        sh '''
                        $SCANNER_HOME/bin/sonar-scanner \
                        -Dsonar.projectName=MicroServiceProject/order-service \
                        -Dsonar.projectKey=order-service \
                        
                        '''  // Chạy phân tích mã nguồn với SonarQube
                    }
                }
            }
        }
        stage('Quality Gate') {
            steps {
                script {
                    waitForQualityGate abortPipeline: false, 
                        credentialsId: 'sonar-token'  // Chờ kết quả kiểm tra chất lượng từ SonarQube
                }
            }
        }
        stage('Setup npm Registry') {
            steps {
                script {
                    sh """
                    npm config set registry ${NEXUS_URL}/repository/npm-proxy-repo/
                    """
                }
            }
        }
        stage('Install Dependencies') {
            steps {
                dir("${FOLDER_PATH}") {  // Di chuyển vào thư mục
                    sh "npm install"  // Cài đặt các phụ thuộc npm
                }
            }
        }
        stage('Trivy scan file system') {
            steps {
                dir("${FOLDER_PATH}") {  // Di chuyển vào thư mục
                    sh '''trivy fs --format template --template "@/usr/local/share/trivy/templates/html.tpl" -o trivy-fs-report.html . '''
                    archiveArtifacts artifacts: 'trivy-fs-report.html', allowEmptyArchive: true
                }
            }
        }
        stage('Snyk Security Test') {
            steps {
                snykSecurityCheck("${FOLDER_PATH}", 'MicroService/order-service')
            }
        }
        stage('Build and Tage Docker Image') {
            steps {
                dir("${FOLDER_PATH}"){
                    withDockerRegistry(credentialsId: 'harbor-cred', url: 'https://harbor.thienngo.click/') {
                        sh """docker build -t ${IMAGE_VERSION} ."""
                    }
                }
            }
        }
        stage('Docker Image Scan') {
            steps {
                sh "trivy clean --all"
                sh """
                    trivy image --timeout 10m \
                    --format template \
                    --template "@/usr/local/share/trivy/templates/html.tpl" \
                    --output ./${TRIVY_IMAGE_REPORT} \
                        $IMAGE_VERSION
                    """
            // Lưu báo cáo vào Jenkins
            archiveArtifacts artifacts: "./${TRIVY_IMAGE_REPORT}", allowEmptyArchive: true
            }
        }
        stage('Push Docker Image') {
            steps {
                withDockerRegistry(credentialsId: 'harbor-cred', url: 'https://harbor.thienngo.click/') { 
                    sh """docker tag ${IMAGE_VERSION} harbor.thienngo.click/devsecops/${IMAGE_VERSION}"""
                    sh """docker push harbor.thienngo.click/devsecops/${IMAGE_VERSION}"""
                }
            }
        }
        stage('Clone Config Repo') {
            steps {
                git branch: 'main', 
                credentialsId: 'github-token-config', 
                url: 'https://github.com/baolonggg/Config-DACN.git'
            }
        }
        stage('Update Manifest') {
            environment {
                GIT_REPO_NAME = "Config-DACN"
                GIT_USER_NAME = "baolonggg"
            }
            steps {
                dir('Config/infra1') {
                    withCredentials([string(credentialsId: 'github-token-config', variable: 'GITHUB_TOKEN')]) {
                        sh '''
                            git config user.email "thienngo.081003@gmail.com"
                            git config user.name "ThienAlice"
                            echo $TAG_IMAGE
                            imageTag=$(grep -oP '(?<=devsecops/microservice/order-service:)[^ ]+' order-service.deployment.yaml)
                            echo $imageTag
                            sed -i "s#${HARBOR_IMAGE}:${imageTag}#${HARBOR_IMAGE}:$TAG_IMAGE#" order-service.deployment.yaml
                            git add order-service.deployment.yaml
                            git commit -m "Update deployment Image to version \${TAG_IMAGE}"
                            git push https://${GITHUB_TOKEN}@github.com/${GIT_USER_NAME}/${GIT_REPO_NAME} HEAD:main
                        '''
                    }
                }
            }
        }
    }
}
