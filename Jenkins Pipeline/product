pipeline {
    agent { label 'build-server' }
    tools {
        jdk 'jdk17'
        
    }
    environment {
        SCANNER_HOME = tool 'sonar-scanner'
        FOLDER_PATH="source/src/product-service"
        TRIVY_IMAGE_REPORT = "trivy-image-report-product-${env.BUILD_ID}.html"
        CI_PROJECT_NAME = 'microservice/product-service' 
        VERSION  = "0.0.1"
        TAG_IMAGE= "${VERSION}-${env.BUILD_ID}"
        IMAGE_VERSION = "${CI_PROJECT_NAME}:${TAG_IMAGE}"
        
        PROJECT_NAME = 'product-service'
        ARTIFACT_NAME = "${PROJECT_NAME}-build-${TAG_IMAGE}.tar.gz"
        
        HARBOR_REPO_NAME="devsecops"
        HARBOR_IMAGE="${HARBOR_REPO_NAME}/${CI_PROJECT_NAME}"
        NEXUS_URL = "http://nexus.thienngo.tech"
        
        PATH = "/home/jenkins/.cargo/bin:$PATH"
    }
    stages {
        stage('Cleaning Workspace') {
            steps {
                cleanWs()  // Dọn dẹp workspace
            }
        }
        stage('Git Checkout') {
            steps {
                   // Di chuyển vào thư mục
                    git branch: 'main', 
                        credentialsId: 'git-cred', 
                        url: 'https://github.com/ThienAlice/DACN.git'  // Clone repository từ Git
                
            }
        }
        
        stage('SonarQube Analysis') {
            steps {
                dir("${FOLDER_PATH}") {  // Di chuyển vào thư mục
                    withSonarQubeEnv('sonar') {  // Sử dụng môi trường SonarQube đã cấu hình
                        sh '''
                        $SCANNER_HOME/bin/sonar-scanner \
                        -Dsonar.projectName=MicroServiceProject/product-service \
                        -Dsonar.projectKey=product-service \
                        
                        '''  // Chạy phân tích mã nguồn với SonarQube
                    }
                }
            }
        }
        stage('Quality Gate') {
            steps {
                script {
                    waitForQualityGate abortPipeline: false, 
                        credentialsId: 'sonar-token'  // Chờ kết quả kiểm tra chất lượng từ SonarQube
                }
            }
        }
        stage('Trivy scan file system') {
            steps {
                dir("${FOLDER_PATH}") {  // Di chuyển vào thư mục
                    sh '''trivy fs --format template --template "@/usr/local/share/trivy/templates/html.tpl" -o trivy-fs-report.html . '''
                    archiveArtifacts artifacts: 'trivy-fs-report.html', allowEmptyArchive: true
                }
            }
        }
        stage('Install Dependencies and Build') {
            steps {
                dir("${FOLDER_PATH}") {  // Di chuyển vào thư mục
                    sh 'cargo build'
                }
            }
        }
        stage('Scan Depedencies') {
            steps {
                dir("${FOLDER_PATH}") { 
                    script {
                    // Chạy cargo audit và lấy exit code
                        def auditStatus = sh(script: 'cargo audit --json > audit-report.json', returnStatus: true)
                    
                        if (auditStatus == 0) {
                            echo "No vulnerabilities found."
                        }else {
                            echo "Vulnerabilities detected! Review the audit-report.json."
                        }
                    }
                    archiveArtifacts artifacts: 'audit-report.json', allowEmptyArchive: true
                }
            }
        }
        stage('Push artifact to Nexus') {
            steps {
                dir("${FOLDER_PATH}"){
                    script {
                        sh 'mkdir build_output'
                        sh 'tar -czvf ${ARTIFACT_NAME} -C target/debug product-service'
                        sh """curl -u ${NEXUS_USERNAME}:${NEXUS_PASSWORD} --upload-file ${ARTIFACT_NAME} ${NEXUS_URL}/repository/microservice-artifact-repo/${PROJECT_NAME}/build/${VERSION}/${ARTIFACT_NAME}"""
                    }
                }
                
            }
        }
        stage('Build and Tage Docker Image') {
            steps {
                dir("${FOLDER_PATH}"){
                    withDockerRegistry(credentialsId: 'harbor-cred', url: 'https://harbor.thienngo.click/') {
                        sh """docker build -t ${IMAGE_VERSION} ."""
                    }
                }
            }
        }
        stage('Docker Image Scan') {
            steps {
                sh """docker run --rm -v ${WORKSPACE}:/${CI_PROJECT_NAME} -v /var/run/docker.sock:/var/run/docker.sock aquasec/trivy clean --all """
                sh """docker run --rm -v ${WORKSPACE}:/${CI_PROJECT_NAME} -v /var/run/docker.sock:/var/run/docker.sock aquasec/trivy image --timeout 10m --format template --template "@contrib/html.tpl" --output ${CI_PROJECT_NAME}/${TRIVY_IMAGE_REPORT} $IMAGE_VERSION"""
                archiveArtifacts artifacts: "${TRIVY_IMAGE_REPORT}", allowEmptyArchive: true
            }
        }
        stage('Push Docker Image') {
            steps {
                withDockerRegistry(credentialsId: 'harbor-cred', url: 'https://harbor.thienngo.click/') {
                    sh """docker tag ${IMAGE_VERSION} harbor.thienngo.click/devsecops/${IMAGE_VERSION}"""
                    sh """docker push harbor.thienngo.click/devsecops/${IMAGE_VERSION}"""
                }
            }
        }
        stage('Update Manifest') {
            environment {
                GIT_REPO_NAME = "Config-DACN"
                GIT_USER_NAME = "baolonggg"
            }
            steps {
                dir('Config/infra1') {
                    withCredentials([string(credentialsId: 'github-token-config', variable: 'GITHUB_TOKEN')]) {
                        sh '''
                            git config user.email "thienngo.081003@gmail.com"
                            git config user.name "ThienAlice"
                            echo $TAG_IMAGE
                            imageTag=$(grep -oP '(?<=devsecops/microservice/store-front-service:)[^ ]+' store-front.deployment.yaml)
                            echo $imageTag
                            sed -i "s#${HARBOR_IMAGE}:${imageTag}#${HARBOR_IMAGE}:$TAG_IMAGE#" order-service.deployment.yaml
                            git add order-service.deployment.yaml
                            git commit -m "Update deployment Image to version \${TAG_IMAGE}"
                            git push https://${GITHUB_TOKEN}@github.com/${GIT_USER_NAME}/${GIT_REPO_NAME} HEAD:main
                        '''
                    }
                }
            }
        }
    }
}
